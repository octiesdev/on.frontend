import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { TonConnectButton } from "@tonconnect/ui-react";
import { useUser } from "../UserContext"; // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è userId
import "../styles/Onexs.css";

import logo from "../assets/logo.png";
import buttonPartners from "../assets/buttonPartners.png";
import tonIMG from "../assets/ton-img.png";
import onexIMG from "../assets/onex-circle.png";
import Footer from "../Footer";

const API_URL = "https://adminviber1x-production.up.railway.app"; // –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞

const API_URL_MAIN = "https://1xback-production.up.railway.app"; 


const Onexs = () => {
  const { userId } = useUser(); // ‚úÖ –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const [selectedCategory, setSelectedCategory] = useState("all");
  const [onexNodes, setOnexNodes] = useState([]);
  const [userNodes, setUserNodes] = useState([]);
  const [purchasedNodes, setPurchasedNodes] = useState([]); // üî• –ò—Å—Ç–æ—Ä–∏—è –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –Ω–æ–¥


  const navigate = useNavigate();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–¥—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    fetch(`${API_URL}/onex-nodes`)
      .then((res) => res.json())
      .then((data) => {
        setOnexNodes(data);
      })
      .catch((error) => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–¥:", error));
  }, []);

  useEffect(() => {
    if (!userId) return;
  
    const fetchUserData = async () => {
      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–Ω—ã–µ –Ω–æ–¥—ã
        const response = await fetch(`${API_URL_MAIN}/get-active-paid-nodes?userId=${userId}`);
        const data = await response.json();
        if (Array.isArray(data.activePaidNodes)) setUserNodes(data.activePaidNodes);
  
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –Ω–æ–¥
        const historyResponse = await fetch(`${API_URL_MAIN}/get-paid-farming-status`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ userId }),
        });
        const historyData = await historyResponse.json();
  
        if (Array.isArray(historyData.purchasedPaidNodes)) {
          setPurchasedNodes(historyData.purchasedPaidNodes); // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º `purchasedPaidNodes`
          console.log("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ `purchasedPaidNodes`:", historyData.purchasedPaidNodes);
          console.log("üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ purchasedPaidNodes:", historyData.purchasedPaidNodes);
          console.log("üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ nodeId:", historyData.purchasedPaidNodes.map(n => String(n.nodeId)));
        }
  
        console.log("üìå –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∑–∞—Ñ–∞—Ä–º–ª–µ–Ω–Ω—ã–µ –Ω–æ–¥—ã (purchasedNodes):", historyData.purchasedPaidNodes); // ‚úÖ –õ–û–ì

      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      }
    };
  
    fetchUserData();
  }, [userId]); // üî• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ `userId`

  useEffect(() => {
    const interval = setInterval(() => {
      setUserNodes((prevNodes) =>
        prevNodes.map((node) => ({
          ...node,
          status: purchasedNodes?.some(n => String(n.nodeId) === String(node._id)) ? "–∑–∞—Ñ–∞—Ä–º–ª–µ–Ω–æ" : node.status,
          remainingTime: getRemainingTime(node.farmEndTime)
        }))
      );
    }, 5000); // üî• –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  
    return () => clearInterval(interval);
  }, [userId, purchasedNodes]); // üî• –°–ª–µ–¥–∏–º –∑–∞ `purchasedNodes`


  const startPaidFarming = async (node) => {
    if (!userId) {
      console.error("‚ùå –û—à–∏–±–∫–∞: userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
      return;
    }
  
    try {
      const response = await fetch(`${API_URL_MAIN}/start-paid-farming`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userId, nodeId: node._id }),
      });
  
      const data = await response.json();
  
      if (data.success) {
        console.log("‚úÖ –ü–ª–∞—Ç–Ω–∞—è –Ω–æ–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:", data);
  
        // üî• –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –Ω–æ–¥—É –≤ userNodes
        setUserNodes((prevNodes) => [...prevNodes, { 
          ...node, 
          status: "—Ç–∞–π–º–µ—Ä", 
          farmEndTime: data.farmEndTime 
        }]);
  
        console.log("üìå –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥ (userNodes):", userNodes);
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞:", data.error);
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞—Ç–Ω–æ–≥–æ —Ñ–∞—Ä–º–∏–Ω–≥–∞:", error);
    }
  };

  // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–Ω—ã–µ –Ω–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (!userId) return;

    const fetchActiveNodes = async () => {
      try {
        const response = await fetch(`${API_URL_MAIN}/get-active-paid-nodes?userId=${userId}`);
        const data = await response.json();

        if (Array.isArray(data.activePaidNodes)) {
          setUserNodes(data.activePaidNodes);
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥:", error);
      }
    };

    fetchActiveNodes();
  }, [userId]);

  const getRemainingTime = (endTime) => {
    const now = Date.now();
    const diff = new Date(endTime).getTime() - now;
  
    if (diff <= 0) return "–ó–ê–§–ê–†–ú–õ–ï–ù–û";
  
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff / (1000 * 60)) % 60);
    const seconds = Math.floor((diff / 1000) % 60);
  
    return `${hours}—á ${minutes}–º ${seconds}—Å`;
  };

  useEffect(() => {
    const interval = setInterval(() => {
      setUserNodes((prevNodes) => 
        prevNodes.map((node) => ({
          ...node,
          remainingTime: getRemainingTime(node.farmEndTime),
        }))
      );
    }, 1000); // üî• –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  
    return () => clearInterval(interval); // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  }, []);

  useEffect(() => {
    const interval = setInterval(() => {
      // üî• –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–¥ –∏ —Ç–∞–π–º–µ—Ä
      setUserNodes((prevNodes) =>
        prevNodes.map((node) => ({
          ...node,
          status: new Date(node.farmEndTime) <= Date.now() ? "–∑–∞—Ñ–∞—Ä–º–ª–µ–Ω–æ" : "—Ç–∞–π–º–µ—Ä",
          remainingTime: getRemainingTime(node.farmEndTime)
        }))
      );
  
      // üî• –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞—Ä–º–∏–Ω–≥–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      if (userId) {
        fetch(`${API_URL_MAIN}/get-paid-farming-status`, {
          method: "POST",
          headers: {
              "Content-Type": "application/json",
              "Accept": "application/json"
           },
          body: JSON.stringify({ userId }),
        })
          .then((res) => res.json())
          .then((data) => {
            if (data.success) {
              console.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–æ–¥—ã –∏ –±–∞–ª–∞–Ω—Å");
              setUserNodes(data.activePaidNodes); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–¥
            }
          })
          .catch((err) => console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", err));
      }
    }, 5000);
  
    return () => clearInterval(interval);
  }, [userId]);

  return (
    <div className="App">
      <div className="ONEXs_Window">
        <div className="Header">
          <div className="HeaderLogoContainer">
            <img src={logo} alt="Logo" className="headerlogo" onClick={() => navigate("/")}></img>
          </div>
          <div className="HeaderButtonsContainer">
            <img src={buttonPartners} alt="" className="headerButtonPartners" onClick={() => navigate("/ambasProgram")}></img>
            <TonConnectButton />
          </div>
        </div>

        <div className="mainTasksPageContainer">
          <div className="info-onexs-block">
            <div className="info-onexs-nameText">
              <h2>ONEXs</h2>
              <p>–ê–∫—Ç–∏–≤–∞—Ü–∏—è ONEX‚Äôs –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å<br/>TON, ONEX –∏ –¥—Ä. –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.</p>
              <div className="section-buttons">
                <button className={`all-button ${selectedCategory === "all" ? "active" : ""}`}
                  onClick={() => setSelectedCategory("all")}>–í—Å–µ</button>
                <button className={`my-button ${selectedCategory === "my" ? "active" : ""}`}
                  onClick={() => setSelectedCategory("my")}>–ê–∫—Ç–∏–≤–Ω—ã–µ</button>
                <button className={`limited-button ${selectedCategory === "limited" ? "active" : ""}`}
                  onClick={() => setSelectedCategory("limited")}>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ</button>
              </div>
            </div>
          </div>

          {/* üî• –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
          {selectedCategory === "all" && (
           <>
           {onexNodes.map((node) => {
             // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –Ω–æ–¥–∞ –∑–∞—Ñ–∞—Ä–º–ª–µ–Ω–∞
             const isFarmed = purchasedNodes.some(n => `${n.nodeId}` === `${node._id}`);
             console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–¥—É: ${node._id}, isFarmed = ${isFarmed}`);

             console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–¥—É: ${node._id} (—Ç–∏–ø: ${typeof node._id})`);
             console.log(`üÜî –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å ID –∏–∑ purchasedNodes:`, purchasedNodes.map(n => `${n.nodeId} (—Ç–∏–ø: ${typeof n.nodeId})`));
             console.log(`üé≠ –ù–æ–¥–∞ ${node._id}: isFarmed = ${isFarmed}`);

             console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–¥—É: ${node._id} ‚Üí ${isFarmed ? "–ó–ê–§–ê–†–ú–õ–ï–ù–û" : "–ù–ï –∑–∞—Ñ–∞—Ä–º–ª–µ–Ω–æ"}`);

             return (
               <NodeBlock 
                 key={node._id} 
                 node={node} 
                 isFarmed={isFarmed} 
                 onStartFarming={startPaidFarming} 
               />
             );
            })}
          </>
          )}

          {selectedCategory === "limited" && (
            <>
              {onexNodes.filter(node => node.section === "limited").map((node, index, array) => (
                <div 
                  className={`onex-node-limited limited ${index === array.length - 1 ? "onex-node-limited-last" : ""}`} 
                  key={node._id}
                >
                  <NodeBlock node={node} index={index} onStartFarming={startPaidFarming} />
                </div>
              ))}
            </>
          )}

          {selectedCategory === "my" && (
            <>
              {userNodes.map((node, index, array) => (
                <div 
                  className={`onex-node-my my ${index === array.length - 1 ? "onex-node-my-last" : ""}`} 
                  key={node._id}
                >
                  <NodeBlock node={node} index={index} farming={true} endTime={node.farmEndTime} getRemainingTime={getRemainingTime} />
                </div>
              ))}
            </>
          )}
        </div>
      </div>

      <Footer />
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –æ–¥–Ω–æ–π –Ω–æ–¥—ã
const NodeBlock = ({ node, onStartFarming, farming, endTime, getRemainingTime, isFarmed }) => {
  console.log(`üé≠ –ù–æ–¥–∞ ${node._id}: isFarmed = ${isFarmed}`);

  return (
    <div className="info-onexs-nameText">
      <div className="info-section-logo">
        <div className="ton-onex-logo">
          <img src={tonIMG} />
          <h2>TON</h2>
          <img src={onexIMG} />
          <h2>ONEX</h2>
        </div>
        <div className="number-OnexNode">
          <h2>{node.index}</h2> {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω–¥–µ–∫—Å–∞ (01, 02, ...) */}
        </div>
      </div>
      <div className="onexNode-infoBlocks">
        <div className="first-onexNode-infoBlock">
          <div className="farming-time-block">
            <div className="farming-time-block-MainText">–ü–µ—Ä–∏–æ–¥ —Ñ–∞—Ä–º–∏–Ω–≥–∞</div>
            <div className="farming-time-block-Description">{node.days} –¥–Ω–µ–π</div>
          </div>
          <div className="apy-info-block">
            <div className="farming-time-block-MainText">APY</div>
            <div className="farming-time-block-Description">{node.apy}%</div>
          </div>
        </div>
        <div className="single-onexNode-infoBlock">
          <div className="rewardInTon-block">
            <div className="farming-time-block-MainText">–ù–∞–≥—Ä–∞–¥–∞ –≤ TON</div>
            <div className="farming-time-block-Description">
              {node.rewardTon} TON
              <img src={tonIMG} />
            </div>
          </div>
          <div className="rewardInOnex-block">
            <div className="farming-time-block-MainText">–ù–∞–≥—Ä–∞–¥–∞ –≤ ONEX</div>
            <div className="farming-time-block-Description">
              {node.rewardOnex} ONEX
              <img src={onexIMG} />
            </div>
          </div>
        </div>
      </div>

      {/* üî• –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –∏–ª–∏ —Ç–∞–π–º–µ—Ä */}
      <div className="onexNode-PayButton">
      {isFarmed ? (
        <div className="pay-button-onexs-farmed">–ó–ê–§–ê–†–ú–õ–ï–ù–û</div>
      ) : farming ? (
        <div className="pay-button">{getRemainingTime(endTime)}</div>
      ) : (
        <div className="pay-button" onClick={() => onStartFarming(node)}>–ó–ê–ü–£–°–¢–ò–¢–¨</div>
      )}
      </div>
    </div>
  );
};

export default Onexs; 
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { TonConnectButton, useTonAddress, useTonConnectUI } from "@tonconnect/ui-react";
import { beginCell, toNano } from "@ton/core";
import { useUser } from "../UserContext"; // üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
import PartnerButton from "../pages/PartnerButton";
import "../styles/Profile.css";


import logo from "../assets/logo.png";
import buttonPartners from "../assets/buttonPartners.png";
import Footer from "../Footer"; // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ—É—Ç–µ—Ä
import tonIMG from "../assets/ton-img.png";
import depoIMG from "../assets/deposit-icon.png";
import withIMG from "../assets/withdraw-icon.png";
import dollarIMG from "../assets/dollar-img.png";
import receiveIMG from "../assets/receive-icon.png";
import onexlogoIMG from "../assets/onex-img-all.png";

const API_URL = "https://1xback-production.up.railway.app"; 

const Profile = () => {
    const { userId, balance, fetchBalance } = useUser(); 
    const [activeSection, setActiveSection] = useState("default");

    const [amount, setAmount] = useState("–°–£–ú–ú–ê");
    const [isNeutral, setIsNeutral] = useState(true); 
    const [isValidAmount, setIsValidAmount] = useState(false); 

    const [withdrawAmount, setWithdrawAmount] = useState("–°–£–ú–ú–ê");
    const [isValidWithdraw, setIsValidWithdraw] = useState(false);
    const [withdrawHistory, setWithdrawHistory] = useState([]);

    const [tonConnectUI] = useTonConnectUI();
    const walletAddress = useTonAddress(); 

    const [farmStatus, setFarmStatus] = useState("–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞");
    const [timeLeft, setTimeLeft] = useState("");

    const [availableNodes, setAvailableNodes] = useState(100); // ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–¥

    const [tonToUsdRate, setTonToUsdRate] = useState(null); // ‚úÖ –ö—É—Ä—Å TON ‚Üí USD

    const [depositHistory, setDepositHistory] = useState([]);

    
    const navigate = useNavigate();

    useEffect(() => {
      if (!userId) return;
    
      fetch(`${API_URL}/get-deposit-history?userId=${userId}`)
        .then(res => res.json())
        .then(data => setDepositHistory(data.history || []))
        .catch(err => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:", err));
    }, [userId]);

    useEffect(() => {
      if (userId && walletAddress) {
          updateWalletAddress(userId, walletAddress); 
      }
    }, [userId, walletAddress]);
    

    useEffect(() => {
      if (userId) {
        console.log("‚úÖ userId –Ω–∞–π–¥–µ–Ω:", userId);
        checkFarmingStatus();
      } else {
        console.error("‚ùå userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
      }
    }, [userId]);

    const fetchTonToUsdRate = async () => {
      try {
        const response = await fetch("https://api.binance.com/api/v3/ticker/price?symbol=TONUSDT");
    
        if (!response.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${response.status}`);
        }
    
        const data = await response.json();
        console.log("üìå Binance API –æ—Ç–≤–µ—Ç:", data);
    
        if (data && data.price) {
          setTonToUsdRate(parseFloat(data.price)); // ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ
        } else {
          console.error("‚ùå Binance API –Ω–µ –≤–µ—Ä–Ω—É–ª –∫—É—Ä—Å TON/USD:", data);
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–∞ TON/USD:", error);
      }
    };

    useEffect(() => {
      fetchTonToUsdRate();
    }, []); // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
    
    // ‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–¥
    const fetchAvailableNodes = async () => {
      try {
        const response = await fetch(`${API_URL}/get-available-nodes`);
        const data = await response.json();

        if (response.ok) {
          setAvailableNodes(data.availableNodes); // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        } else {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–¥:", data.error);
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–¥:", error);
      }
    };

    // ‚úÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–¥ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    useEffect(() => {
      fetchAvailableNodes();
    }, []);

    const checkFarmingStatus = async () => {
      try {
        const response = await fetch(`${API_URL}/get-farming-status`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ userId }),
        });
    
        const data = await response.json();
        console.log("üìå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
    
        if (data.success) {
          if (data.status === "–∑–∞—Ñ–∞—Ä–º–ª–µ–Ω–æ") {
            setFarmStatus("–∑–∞—Ñ–∞—Ä–º–ª–µ–Ω–æ");
            fetchBalance(userId); // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
          } else if (data.status === "—Ç–∞–π–º–µ—Ä") {
            setFarmStatus("—Ç–∞–π–º–µ—Ä");
            startCountdown(data.farmEndTime);
          }
        } else {
          console.error("‚ùå –û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª:", data.error);
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞—Ä–º–∏–Ω–≥–∞:", error);
      }
    };
    
    const startCountdown = (endTime) => {
      const interval = setInterval(() => {
        const now = new Date();
        const diff = new Date(endTime) - now;
    
        if (diff <= 0) {
          clearInterval(interval);
          setFarmStatus("–∑–∞—Ñ–∞—Ä–º–ª–µ–Ω–æ");
        } else {
          const seconds = Math.floor(diff / 1000);
          setTimeLeft(`${seconds}`);
        }
      }, );
    };
    
    const startFarming = async () => {
      try {
        const response = await fetch(`${API_URL}/start-farming`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ userId }),
        });
    
        const data = await response.json();
        if (data.success) {
          setFarmStatus("—Ç–∞–π–º–µ—Ä");
          startCountdown(data.farmEndTime);
    
          // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
          fetchAvailableNodes();
        } else {
          console.error("‚ùå –û—à–∏–±–∫–∞:", data.error);
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∞—Ä–º–∏–Ω–≥–∞:", error);
      }
    };

    const updateWalletAddress = async (userId, wallet) => {
      try {
          console.log(`üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ ${wallet} –¥–ª—è userId: ${userId}`);
            const response = await fetch("https://1xback-production.up.railway.app/update-wallet", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ userId, walletAddress: wallet })
            });

            const data = await response.json();
            if (response.ok) {
                console.log("‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:", data);
            } else {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞:", data.error);
            }
        } catch (error) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞:", error);
        }
    };



    useEffect(() => {
      if (userId) {
          fetchBalance(userId);
      } else {
          console.error("‚ùå –û—à–∏–±–∫–∞: userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
      }
    }, [userId]);

    useEffect(() => {
      if (farmStatus === "–∑–∞—Ñ–∞—Ä–º–ª–µ–Ω–æ" && userId) {
        console.log("üéâ –§–∞—Ä–º–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å...");
    
        setTimeout(() => {
          fetchBalance(userId); // üî• –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
        }, ); // ‚úÖ –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É (—á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —Ç–æ—á–Ω–æ –æ–±–Ω–æ–≤–∏–ª –±–∞–ª–∞–Ω—Å)
    
        setTimeout(() => {
          fetchBalance(userId); // üî• –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        }, ); // ‚úÖ –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
      }
    }, [farmStatus, userId]); // üî• –°–ª–µ–¥–∏–º –∑–∞ farmStatus –∏ userId

    const handleSupportClick = () => {
      window.open("https://t.me/zustrich_lab_hr", "_blank");
    };

    const moveCursorToEnd = (element) => {
      const range = document.createRange();
      const selection = window.getSelection();
      range.selectNodeContents(element);
      range.collapse(false); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü
      selection.removeAllRanges();
      selection.addRange(range);
    };


    const sendTransaction = async (amountToSend, comment) => {
      try {
        if (!userId) {
            console.error("‚ùå –û—à–∏–±–∫–∞: userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
            return;
          }

          const amountInNanoTON = toNano(amountToSend).toString();
          const destinationAddress = "0QBkLTS-N_Cpr4qbHMRXIdVYhWMs3dQVpGSQEl44VS3SNwNs";

          const payloadCell = beginCell()
          .storeUint(0, 32)  
          .storeStringTail(`deposit:${userId}`) // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º `userId` –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
          .endCell();
  
          const transaction = {
              validUntil: Math.floor(Date.now() / 1000) + 600,
              messages: [
                  {
                      address: destinationAddress,
                      amount: amountInNanoTON,
                      payload: payloadCell.toBoc().toString("base64") // –ö–æ–¥–∏—Ä—É–µ–º –≤ Base64
                  },
              ],
          };
  
          console.log("üìå –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å payload:", transaction);
          await tonConnectUI.sendTransaction(transaction);
          console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º "${comment}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!`);
          
      } catch (error) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error.message || error);
      }
    };

    const handleWithdraw = async () => {
      if (!isValidWithdraw || withdrawAmount === "–°–£–ú–ú–ê") return;
    
      const value = parseFloat(withdrawAmount);
    
      try {
        const response = await fetch(`${API_URL}/create-withdraw-order`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            userId,
            amount: value,
          }),
        });
    
        const data = await response.json();
    
        if (!response.ok) {
          throw new Error(data.error || "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        }
    
        // –û–±–Ω–æ–≤–∏–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        await fetchBalance(userId);
    
        // –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –æ—Ä–¥–µ—Ä –≤ –∏—Å—Ç–æ—Ä–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å get-withdraw-history)
        setWithdrawHistory(prev => [
          {
            amount: value.toFixed(2),
            status: "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ", // üî• –ù–∞ —Ñ—Ä–æ–Ω—Ç–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –ø–æ–∫–∞ –Ω–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è
            createdAt: new Date().toLocaleString(),
          },
          ...prev,
        ]);
    
        // –û—á–∏—Å—Ç–∫–∞
        setWithdrawAmount("–°–£–ú–ú–ê");
        setIsValidWithdraw(false);
    
        console.log("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥:", error.message);
        alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥.");
      }
    };

    useEffect(() => {
      if (!userId) return;
    
      fetch(`${API_URL}/get-withdraw-orders?userId=${userId}`)
        .then(res => res.json())
        .then(data => setWithdrawHistory(data.orders || []))
        .catch(err => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤:", err));
    }, [userId]);


  return (
    <div className="App">
      {/* –§–æ–Ω */}
      <div className="ONEXs_Window">   
        <div className="Header">  
          <div className="HeaderLogoContainer">  
            <img src={logo} alt="Logo" className="headerlogo"   
            onClick={() => {
              console.log("üî• –õ–æ–≥–æ –∫–ª–∏–∫–Ω—É—Ç–æ!");
              setActiveSection("default"); // ‚¨Ö –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
              setTimeout(() => navigate("/"), 0); // ‚¨Ö –û–∂–∏–¥–∞–µ–º —Ä–µ—Ä–µ–Ω–¥–µ—Ä
            }}>
            </img>
          </div>
            <div className="HeaderButtonsContainer">  
              <PartnerButton />
              <TonConnectButton/>
            </div>
        </div>
        <div className="mainProfilePageContainer"> 
          <div className="info-profile-block"> 
            <div className="info-profile-nameText55"> 
              <div className="rectangle-info-profile">
                <h2>
                <span className="text-in-rectangle">{balance}</span>
                  <div className="rectangle-info-profile-ton">
                    TON
                  </div>
                </h2>
                <p>
                  ‚âà {tonToUsdRate ? (balance * tonToUsdRate).toFixed(2) : "..."} $
                </p>
              </div>
              <div className="rectangle-for-buttons-profile">
                  <div className={`rectangle-buttons-depo ${activeSection === "deposit" ? "active" : ""}`}
                    onClick={() => setActiveSection("deposit")}>
                    <img src={depoIMG} className="buttons-icons" />
                    –í–≤–æ–¥
                  </div>
                  <div className={`rectangle-buttons-with ${activeSection === "withdraw" ? "active" : ""}`}
                    onClick={() => setActiveSection("withdraw")}>
                    <img src={withIMG} className="buttons-icons"/>
                    –í—ã–≤–æ–¥
                  </div>
              </div>
            </div>
            <div className="info-profile-nameText45"> 
              <h2>01</h2>
              <img src={dollarIMG} className="dollar-icon"/>
            </div>
          </div>

        {/* –ï—Å–ª–∏ showDepositSection = false, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ onex-node */}
        {activeSection === "default" && (
            <>
          <div className="info-onex-block"> 
            <div className="info-onex-nameText40"> 
              <div className="rectangle-info-onex">
                <h2>
                  <span className="text-in-rectangle2">08</span>
                  <div className="rectangle-info-onex-onex">
                    ONEX
                  </div>
                </h2>
              </div>
              <div className="rectangle-for-button-onex">
                <div className="rectangle-buttons-receive" onClick={() => navigate("/tasks")}>
                  <img src={receiveIMG} className="receive-button-icon"/>
                  –ü–æ–ª—É—á–∏—Ç—å
                </div>
              </div>
            </div>
            <div className="info-onex-nameText60"> 
              <h2>02</h2>
              <img src={onexlogoIMG} className="onex-logo-icon"/>
            </div>
            </div>
              <div className="text-avaliable-drop">
                –î–û–°–¢–£–ü–ù–´–ô –î–†–û–ü
              </div>
              <div className="onex-node"> 
                <div className="info-onexs-nameText"> 
                  <div className="info-section-logo"> 
                    <div className="ton-onex-logo"> 
                      <img src={tonIMG}/>
                      <h2>TON</h2>
                    </div>
                    <div className="number-OnexNode"> 
                      <h2>03</h2>
                    </div>
                  </div>
                  <div className="onexNode-infoBlocks">
                    <div className="first-onexNode-infoBlock">
                      <div className="farming-time-block">
                        <div className="farming-time-block-MainText2">
                          –ü–µ—Ä–∏–æ–¥ —Ñ–∞—Ä–º–∏–Ω–≥–∞
                        </div>
                        <div className="farming-time-block-Description2">
                          3 –¥–Ω—è
                        </div>
                      </div>
                      <div className="avaliable-onex-info-block">
                        <div className="farming-time-block-MainText2">
                          –î–æ—Å—Ç—É–ø–Ω–æ ONEX's
                        </div>
                        <div className="farming-time-block-Description2">
                          <span className="highlight-text">{availableNodes}</span>/100
                        </div>
                      </div>  
                    </div>
                    <div className="single-onexNode-infoBlock">
                      <div className={`rewardInTon-block ${farmStatus === "–∑–∞—Ñ–∞—Ä–º–ª–µ–Ω–æ" ? "reward-farmed" : ""}`}>
                        <div className="farming-time-block-MainText2">
                          –ù–∞–≥—Ä–∞–¥–∞ –≤ TON
                        </div>
                        <div className="farming-time-block-Description2">
                          +1 TON
                          <img src={tonIMG}/>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="onexNode-PayButton">
                    {farmStatus === "—Ç–∞–π–º–µ—Ä" && (
                      <div className="pay-button-profile">
                        {timeLeft}
                      </div>
                    )}

                    {/* ‚úÖ –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Ñ–∞—Ä–º–∏–Ω–≥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–ê–§–ê–†–ú–õ–ï–ù–û" */}
                    {farmStatus === "–∑–∞—Ñ–∞—Ä–º–ª–µ–Ω–æ" && (
                      <div className="pay-button-profile-farmed">
                        –ó–ê–§–ê–†–ú–õ–ï–ù–û
                      </div>
                    )}

                    {/* ‚úÖ –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–¥—ã */}
                    {farmStatus === "–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" && availableNodes > 0 && (
                      <div className="pay-button-profile" onClick={startFarming}>
                        –ó–ê–ü–£–°–¢–ò–¢–¨ –ë–ï–°–ü–õ–ê–¢–ù–û
                      </div>
                    )}

                    {/* ‚úÖ –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–¥ */}
                    {farmStatus === "–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" && availableNodes === 0 && (
                      <div className="pay-button-profile-nonAvaliable">
                        –ù–ï–¢ –î–û–°–¢–£–ü–ù–´–• ONEX‚Äôs
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </>
          )}

          {activeSection === "deposit" && (
            <>
            <div className="deposit-block">
              <div className="info-deposit-nameText100">
                <div className="rectangle-for-buttons-deposit-block">
                <div
                  className="rectangle-button-amount"
                  contentEditable={true}
                  suppressContentEditableWarning={true}
                  spellCheck={false} // ‚ùå –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏
                  onFocus={(e) => {
                      if (amount === "–°–£–ú–ú–ê") setAmount(""); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
                      moveCursorToEnd(e.target);
                  }}
                  onInput={(e) => {
                    let newValue = e.target.textContent.replace(/\D/g, ""); // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
                
                    if (!newValue) {
                        setAmount(""); 
                        setIsValidAmount(false); // ‚ùå –ß–∏—Å–ª–æ –º–µ–Ω—å—à–µ 5 - –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ
                        setIsNeutral(true); // üî• –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    } else {
                        const isValid = parseInt(newValue) >= 2;
                        setIsValidAmount(isValid);
                        setIsNeutral(false); // ‚ùå –£–±–∏—Ä–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    }
                
                    setAmount(newValue);
                    e.target.textContent = newValue;
                    moveCursorToEnd(e.target);
                }}
                  onBlur={(e) => {
                      if (!e.target.textContent.trim()) {
                          setAmount("–°–£–ú–ú–ê"); // üî• –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –≤–µ—Ä–Ω—É—Ç—å "–°–£–ú–ú–ê"
                          setIsValidAmount(false);
                          e.target.blur(); // üî• –Ø–≤–Ω–æ —É–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å, –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
                      }
                  }}
                  onKeyDown={(e) => {
                      if (e.key === "Enter") {
                          e.preventDefault();
                          e.target.blur(); // üî• –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter
                      }
                  }}>
                    {amount}
                </div>
                <div className={`rectangle-buttonDepo-depoSection ${isNeutral ? "neutral" : isValidAmount ? "valid" : ""}`}
                    onClick={() => {
                      if (isValidAmount) {
                          console.log("üî• –í—ã–∑–æ–≤ sendTransaction —Å userId:", userId);
                          sendTransaction(amount, `deposit:${userId}`);
                      }
                  }}>
                  –ü–û–ü–û–õ–ù–ò–¢–¨
                </div>
                </div>
                <div className="number-OnexNode-deposit-block"> 
                  <h2>02</h2>
                </div>
                <div className="rectangle-for-text-deposit-block"> 
                  <p>1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ (–≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º <br/> —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞) –ø–µ—Ä–µ–¥ –≤–Ω–µ—Å–µ–Ω–∏–µ–º –¥–µ–ø–æ–∑–∏—Ç–∞.</p>
                  <p className={`minimum-deposit-text ${isNeutral ? "neutral" : !isValidAmount ? "error" : ""}`}>
                    2. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç 5 TON.
                  </p>
                  <p>3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ <br/> –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.</p>
                </div>
              </div>
            </div>

            {depositHistory.map((entry, idx) => (
              <div key={idx} className="rectangle-deposit-history" style={{ marginTop: idx === 0 ? "2.8vh" : "1.4vh" }}>
                  <div className="rectangle-deposit-title">
                    <div className="rectangle-deposit-title-MainText">
                      –í–í–û–î
                    </div>
                    <div className="rectangle-deposit-title-Description2">
                      –≤—ã–ø–æ–ª–Ω–µ–Ω
                    </div>
                  </div>
                <div className="rectangle-deposit-info">
                  {entry.amount} TON <img src={tonIMG} />
                </div>
              </div>
            ))}

            <div className="rectangle-support">
              –í —Å–ª—É—á–∞–µ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º —Å –¥–µ–ø–æ–∑–∏—Ç–æ–º, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É.
              <div className="rectangle-button-support" onClick={handleSupportClick}>
                –¢–ï–•.–ü–û–î–î–ï–†–ñ–ö–ê
              </div>
            </div>
            </>
          )}

          {activeSection === "withdraw" && (
            <>
            <div className="deposit-block">
              <div className="info-deposit-nameText100">
                <div className="rectangle-for-buttons-deposit-block">
                <div
                  className="rectangle-button-amount"
                  contentEditable={true}
                  suppressContentEditableWarning={true}
                  spellCheck={false}
                  onFocus={(e) => {
                    if (withdrawAmount === "–°–£–ú–ú–ê") setWithdrawAmount("");
                  }}
                  onInput={(e) => {
                    const input = e.target.textContent.replace(/\D/g, "");
                    const value = parseFloat(input);

                    setWithdrawAmount(input);
                    const isValid = value >= 1 && value <= parseFloat(balance);
                    setIsValidWithdraw(isValid);

                    moveCursorToEnd(e.target);
                  }}
                  onBlur={(e) => {
                    if (!e.target.textContent.trim()) {
                      setWithdrawAmount("–°–£–ú–ú–ê");
                      setIsValidWithdraw(false);
                    }
                  }}
                  onKeyDown={(e) => {
                    if (e.key === "Enter") {
                      e.preventDefault();
                      e.target.blur();
                    }
                  }}
                >
                  {withdrawAmount}
                </div>
                  <div 
                    className={`rectangle-buttonWith-withSection ${isValidWithdraw ? "valid" : ""}`}
                    onClick={handleWithdraw}
                  >
                    –í–´–í–ï–°–¢–ò
                  </div>
                </div>
                <div className="number-OnexNode-deposit-block"> 
                  <h2>02</h2>
                </div>
                <div className="rectangle-for-text-deposit-block"> 
                  <p>1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ (–≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º <br/> —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞) –ø–µ—Ä–µ–¥ –≤–Ω–µ—Å–µ–Ω–∏–µ–º –¥–µ–ø–æ–∑–∏—Ç–∞.</p>
                  <p className={`${!isValidWithdraw && withdrawAmount !== "–°–£–ú–ú–ê" ? "error" : ""}`}>
                    2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 24 —á–∞—Å–æ–≤. 
                  </p>
                  <p>3. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 1 TON.</p>
                </div>
              </div>
            </div>

            {withdrawHistory.map((entry, idx) => (
              <div
                key={idx}
                className={`rectangle-deposit-history order-status ${entry.status === "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ" ? "processing" : entry.status === "–≤—ã–ø–æ–ª–Ω–µ–Ω" ? "completed" :  "rejected"}`}
                style={{ marginTop: idx === 0 ? "2.8vh" : "1.4vh" }}
              >
                <div className="rectangle-deposit-title">
                  <div className="rectangle-deposit-title-MainText">–í–´–í–û–î</div>
                  <div className="rectangle-deposit-title-Description">{entry.status}</div>
                </div>
                <div className="rectangle-deposit-info">
                  {entry.amount} TON <img src={tonIMG} />
                </div>
              </div>
            ))}

            <div className="rectangle-support">
              –í —Å–ª—É—á–∞–µ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º —Å –≤—ã–≤–æ–¥–æ–º, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É.
              <div className="rectangle-button-support" onClick={handleSupportClick}>
                –¢–ï–•.–ü–û–î–î–ï–†–ñ–ö–ê
              </div>
            </div>
            </>
          )}


        </div>
      </div>
       {/* –§—É—Ç–µ—Ä */}
       <Footer />
    </div>
  );
};

export default Profile;
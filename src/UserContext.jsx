import React, { createContext, useState, useEffect, useContext } from "react";

const UserContext = createContext();

export const UserProvider = ({ children }) => {
  const [userId, setUserId] = useState(null);
  const [balance, setBalance] = useState("0.00");

  useEffect(() => {
    fetchUserData();
  }, []);

  const fetchUserData = async () => {
    try {
      const tg = window.Telegram?.WebApp;
      const telegramId = tg?.initDataUnsafe?.user?.id;

      if (telegramId) {
        console.log("‚úÖ `userId` –∏–∑ Telegram.WebApp:", telegramId);
        setUserId(telegramId);
        await registerUser(telegramId); // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –±—ç–∫–µ–Ω–¥
        fetchBalance(telegramId);
        return;
      }

      console.log("üîÑ `userId` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ WebApp, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞...");
      const response = await fetch("https://1xback-production.up.railway.app/get-user", {
        headers: { "x-telegram-id": telegramId || "" }
      });
      const data = await response.json();

      if (response.ok && data.userId) {
        setUserId(data.userId);
        fetchBalance(data.userId);
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞: userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞!");
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ userId:", error);
    }
  };

  const registerUser = async (telegramId) => {
    try {
      console.log("üìå –û—Ç–ø—Ä–∞–≤–∫–∞ `telegramId` –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", telegramId);
      const response = await fetch("https://1xback-production.up.railway.app/register-user", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ telegramId })
      });

      const data = await response.json();
      if (response.ok) {
        console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", data);
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", data.error);
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ `telegramId` –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", error);
    }
  };

  const fetchBalance = async (id) => {
    try {
      console.log("üìå –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è userId:", id);
      const response = await fetch(`${API_URL}/get-balance?userId=${id}`);
      const data = await response.json();
  
      if (response.ok && data.balance !== undefined) {
        const newBalance = parseFloat(data.balance).toFixed(2);
        console.log("‚úÖ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:", newBalance);
  
        setBalance(newBalance); // üî• –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
  
        setTimeout(() => {
          setBalance((prev) => prev + 0); // üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
        }, 100);
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞: –±–∞–ª–∞–Ω—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞!");
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", error);
    }
  };

  return (
    <UserContext.Provider value={{ userId, balance, fetchBalance }}>
      {children}
    </UserContext.Provider>
  );
};

export const useUser = () => useContext(UserContext);
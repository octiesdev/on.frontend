import React, { createContext, useState, useEffect, useContext } from "react";

const UserContext = createContext();

export const UserProvider = ({ children }) => {
  const [userId, setUserId] = useState(null);
  const [balance, setBalance] = useState("0.00");

  useEffect(() => {
    fetchUserData();
  }, []);

  const fetchUserData = async () => {
    try {
      const tg = window.Telegram?.WebApp;
      const initData = tg?.initData; // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

      if (!initData) {
        console.error("‚ùå –û—à–∏–±–∫–∞: `initData` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
        return;
      }

      console.log("‚úÖ `initData` –ø–æ–ª—É—á–µ–Ω:", initData);

      const response = await fetch("https://1xback-production.up.railway.app/auth", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ initData })
      });

      const data = await response.json();

      if (response.ok && data.userId) {
        console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω userId:", data.userId);
        setUserId(data.userId);
        fetchBalance(data.userId);
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", data.error);
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ userId:", error);
    }
  };

  const fetchBalance = async (id) => {
    try {
      console.log("üìå –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è userId:", id);
      const response = await fetch(`https://1xback-production.up.railway.app/get-balance?userId=${id}`);
      const data = await response.json();

      if (response.ok && data.balance !== undefined) {
        setBalance(parseFloat(data.balance).toFixed(2));
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞: –±–∞–ª–∞–Ω—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞!");
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", error);
    }
  };

  return (
    <UserContext.Provider value={{ userId, balance, fetchBalance }}>
      {children}
    </UserContext.Provider>
  );
};

export const useUser = () => useContext(UserContext);
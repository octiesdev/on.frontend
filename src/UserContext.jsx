import React, { createContext, useState, useEffect, useContext } from "react";

const UserContext = createContext();

export const UserProvider = ({ children }) => {
  const [userId, setUserId] = useState(sessionStorage.getItem("userId") || null);
  const [balance, setBalance] = useState(sessionStorage.getItem("balance") || "0.00");

  // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º `userId` –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  useEffect(() => {
    if (!userId) {
      fetchUserData();
    } else {
      fetchBalance(userId);
    }
  }, []);

  const fetchUserData = async () => {
    try {
      const response = await fetch("https://1xback-production.up.railway.app/get-user");
      const data = await response.json();

      if (response.ok && data.userId) {
        setUserId(data.userId);
        sessionStorage.setItem("userId", data.userId); // üî• –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ sessionStorage
        fetchBalance(data.userId);
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞: userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞!");
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ userId:", error);
    }
  };

  const fetchBalance = async (id) => {
    try {
      const response = await fetch(`https://1xback-production.up.railway.app/get-balance?userId=${id}`);
      const data = await response.json();

      if (response.ok && data.balance !== undefined) {
        const formattedBalance = parseFloat(data.balance).toFixed(2);
        setBalance(formattedBalance);
        sessionStorage.setItem("balance", formattedBalance); // üî• –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", error);
    }
  };

  return (
    <UserContext.Provider value={{ userId, balance, fetchUserData, fetchBalance }}>
      {children}
    </UserContext.Provider>
  );
};

export const useUser = () => useContext(UserContext);